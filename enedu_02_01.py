# -*- coding: utf-8 -*-
"""ENEDU 02_01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zFHQVS0l-cly3ceAY9FRSLTOJQsUoNYY

#importar las librerias
"""

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import seaborn as sns

"""#Importamos los datos"""

#dataset
inicial=pd.read_stata('2_1_enedu2018_0201_director.dta')

inicial

#mostramos las columnas que tiene el dataset
inicial.columns

# mostramos la quinta columna del data dataset
inicial.columns[4]

#transformamos el objeto inicial en un tipo de lista
list(inicial.columns)

# mostramos el tipo de valor
type(inicial.columns)

# operaciones se puede realizar con los datos de la columna
dir(inicial.columns)

# mostarmos los datos de la columna
inicial['region']

# segunda forma :
inicial.region

# tercera forma utlizando el atributo loc
inicial.loc[:, 'region']

#cuarta forma : utilizando en iloc
inicial.iloc[:, 2]

"""#Visulalizar mas de una columna"""

# método loc
inicial.loc[:, ['departamento','region','provincia','distrito','cen_pob']]

#método iloc
inicial.iloc[:,[4,2,6,8,10]]

"""#ACCESO A FILAS
* head
* tail
* sample


"""

# Utilizando el HEAD por defecto muestra las 5 primeras columnas
inicial.head(n =8)



#utlizando TAIL por defecto muestar las 5 ultimas columnas
inicial.tail(n=8)

#utlizando  sample por defecto muestra una calumna o fila aleatoria
inicial.sample(n=8)

#obtener una muestra  de cinco  columnas aleatorias
inicial.sample(n=5 , axis=1)

"""#TIPO DE DATOS DE LAS COLUMNAS"""

inicial.dtypes

"""#Anilisís unidimensional"""

inicial.ddir_g_010

# cuales son los posibles valores en la columna aplicando el método uniquie
inicial.ddir_g_010.unique()

#cuantos valores hay para cada valor  de la una columna en especifico
inicial.ddir_g_010.value_counts()

# mostrar el valor anterior en porcentaje
inicial['ddir_g_010'].value_counts()*100/inicial.shape[0]

inicial['area'].value_counts()

#con porcentaje
inicial['area'].value_counts()*100/inicial.shape[0]

# mostar los datos de la culumna p2_1_02_006_2_1
inicial.iloc[:, 75]

#contamos los valores
inicial.iloc[:, 75].unique()

#mostrar los valores por cada categoría
inicial.iloc[:,75].value_counts()

#mostramos en porcentajes
inicial.iloc[:,75].value_counts()*100/inicial.shape[0]

#ordenamos de forma ascendente el cálculo de la celda anterior
inicial.iloc[:,75].value_counts().sort_index()

#ordenamos de forma descendente el cálculo de la columna p2_1_02_006_2_1
inicial.iloc[:,75].value_counts().sort_index(ascending=False)

# mostrar los valores con porcentaje de forma descendentes
inicial.iloc[:,75].value_counts().sort_index(ascending=False)*100/inicial.shape[0]

"""#ANALISÍS BUIDIMENCIONAL
* Departamento
* P2_1_02_006_2_1
"""

#mostra el número de departameto
inicial.departamento.unique()

inicial.iloc[:,4].unique().size

#Distribución del número de minutos de recreo del departamento Puno
inicial.loc[inicial.departamento == 'PUNO', 'p2_1_02_006_2_1']

# calculamos el tiempo promedio en minutos de la duración de recreo en el departameto de PUNO
inicial.loc[inicial.departamento=='PUNO', 'p2_1_02_006_2_1']. mean()

puno_recreo = inicial.loc[inicial.departamento=='PUNO', 'p2_1_02_006_2_1'].value_counts().rename_axis('Horas de Recreo')
display(puno_recreo)

#mostrar la distribución de minutos de duración del recreo en el departamento de LA LIBERTAD
NunFilas_Lib=inicial.loc[inicial.departamento=='LA LIBERTAD', 'p2_1_02_006_2_1'].shape[0]
inicial.loc[inicial.departamento=='LA LIBERTAD', 'p2_1_02_006_2_1'].value_counts().sort_index(ascending=False)*100/NunFilas_Lib

#mostrar en gráfica de barra
PunoMin_recreo=inicial.loc[inicial.departamento=='LA LIBERTAD', 'p2_1_02_006_2_1'].value_counts().sort_index(ascending=False)*100/NunFilas_Puno
PunoMin_recreo.plot(kind='bar')
plt.title('LA LIBERTAD')
plt.xlabel('Minutos de recreo')
plt.show()

"""#EJERCICIO
* Costruir una driagram ade barras para cada departamento
* Guardar la imagen en una carpeta
"""

os.makedirs('diagramar_baras')

os.chdir('diagramar_baras')

#al cometer un error borramos el archivo
os.chdir('/content/')
os.system('rm -rf diagramar_baras')
os.listdir

for dpto in inicial.departamento.unique():
  NunFilas_Puno=inicial.loc[inicial.departamento==dpto, 'p2_1_02_006_2_1'].shape[0]
  PunoMin_recreo=inicial.loc[inicial.departamento==dpto, 'p2_1_02_006_2_1'].value_counts().sort_index(ascending=False)*100/NunFilas_Puno
  PunoMin_recreo.plot(kind='bar')
  plt.title(dpto)
  plt.xlabel('Minutos de recreo')
  plt.savefig('Departamento' + dpto + '.png')
  plt.show()



#mostrar los valores de la columna departamento
inicial['departamento']

for region in inicial.region.unique():

  filas=inicial.loc[inicial.region==region, 'p2_1_02_006_2_1'].shape[0]
  region_recreo=inicial.loc[inicial.region==region, 'p2_1_02_006_2_1' ].value_counts().sort_index(ascending=False)*100/filas
  region_recreo.plot(kind='bar')
  plt.title(region)
  plt.xlabel('Minutos de recreo')
  plt.ylabel('porcentaje de colegios')
  plt.legend()
  plt.show()

#mostar la cantidad de colegio del distrio de Taurija, Pataz, La Laibertad

filas=inicial[(inicial['region']=='LA LIBERTAD') & (inicial['provincia']=='PATAZ') & (inicial['distrito'] =='TAURIJA') ]
filas[['region', 'provincia', 'distrito']]

#Mostrar la distruibución de  las horas de recreo de  la proovincia de Pataz región La Libertad
filas=inicial[(inicial['region']=='LA LIBERTAD') & (inicial['provincia']=='PATAZ')]
filas[['region', 'provincia', 'distrito', 'p2_1_02_006_2_1']]

# mostrar la columna sexo de los directores
inicial.loc[inicial.es_director==1,'ddir_g_002'].value_counts()

director_sexo=inicial.loc[inicial.es_director==1, 'ddir_g_002'].value_counts()
director_sexo.plot(kind='bar')
plt.title('Cantidad de direciores por sexo')
plt.xlabel('SeXO')
plt.ylabel('Cantidad')
plt.show()

director_sexo = inicial.loc[inicial.es_director == 1, 'ddir_g_002'].value_counts()
colors = sns.color_palette("husl", len(director_sexo))

# Crear el gráfico de barras
fig, ax = plt.subplots(figsize=(8, 5))
bars = ax.bar(director_sexo.index, director_sexo.values, color=colors)

# Agregar las cantidades encima de cada barra
for bar, value in zip(bars, director_sexo.values):
    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(),
            str(value), ha='center', va='bottom', fontsize=10, color='black')

# Personalización del gráfico
ax.set_title('Cantidad de Directores por Sexo', fontsize=14)
ax.set_xlabel('Sexo', fontsize=12)
ax.set_ylabel('Cantidad', fontsize=12)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

plt.show()

#Sexo docente
inicial.loc[inicial.es_docente==0, 'ddir_g_002'].value_counts()

#docentes que son directores
inicial['es_docente'].value_counts()

director_docente = inicial.loc[(inicial['es_director'] == 1, 'es_docente')].value_counts()
colors = ['#8FBC8F', '#5F9EA0']
nombre_columna = ['Si', 'No']
fig, ax = plt.subplots(figsize=(8, 5))
bars = ax.bar(director_docente.index, director_docente.values, color=colors, label=nombre_columna)
ax.set_xticklabels(director_docente.index, color='black', fontsize=12)

for bar, value, in zip(bars, director_docente.values, ):
    ax.text(bar.get_x() + bar.get_width() / 2, bar.get_height(),
            str(value), ha='center', va='bottom', fontsize=10, color='black')

ax.set_title('Cantidad de Docentes que son Directores', fontsize=14)
ax.set_xlabel('Docencia', fontsize=12)
ax.set_ylabel('Cantidad', fontsize=12)
ax.legend()
plt.show()

recreo_horas = inicial['p2_1_02_006_2_1'].value_counts()

data = recreo_horas.values
labels = recreo_horas.index

def func(pct, allvals):
    absolute = int(np.round(pct/100.*np.sum(allvals)))
    return f"{pct:.1f}%\n({absolute:d} colegios)"

fig, ax = plt.subplots(figsize=(8, 6), subplot_kw=dict(aspect="equal"))
wedges, texts, autotexts = ax.pie(data, autopct=lambda pct: func(pct, data),
                                  textprops=dict(color="w"))

ax.legend(wedges, labels,
          title="Horas de Recreo",
          loc="center left",
          bbox_to_anchor=(1, 0, 0.5, 1))

plt.setp(autotexts, size=10, weight="bold")
ax.set_title("Distribución de Horas de Recreo", fontsize=14)

plt.show()